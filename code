def dont():
  array=["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
  char=random.choice(array)
  a=random.randint(1, 3)
  if a==1:
    print("Write anything With "+char)
    b1=(input("first input with "+char+":")).lower()
    b2=(input("second input with "+char+":")).lower()
    b3=(input("thrid input with "+char+":")).lower()
    if (char in b1) and (char in b2) and (char in b3):
      return True
    else:
      return False
  elif a==2:
    print("Write anything Without "+char)
    b1=(input("first input without "+char+":")).lower()
    b2=(input("second input without "+char+":")).lower()
    b3=(input("thrid input without "+char+":")).lower()
    if (char not in b1) and (char not in b2) and (char not in b3):
      return True
    else:
      return False
  else:
    print("Don't do anything \n")
    oOgabOoga, o, e=select.select([sys.stdin], [], [], 10)
    if not oOgabOoga:
      return True
    else:
      sys.stdin.readline().strip()
      return False





############################################################################################################
#Polyominoes

dimension=5
def eachrow(piece, row):
    line=""
    for column in range(1,dimension+1):
        if piece[(row-1)*dimension+column]==1:
            line = line + "â– "+" "
        else:
            line = line + " " + " "
    return line + "  |   "
def eachline(row,piecerows):
    wholeline=""
    for everypiece in piecerows:
        wholeline += eachrow(everypiece,row)
    return wholeline
def drawpieces(pieces):
    spaces = (dimension-1)*" "
    if len(pieces) > 1:
        for i in range(len(pieces)):
            print(spaces+ str(i+1) + spaces + "   |"+(4-len(str(i+2)))*" ", end = "")
    print()
    row = 1
    while(row<=dimension):
        print(eachline(row,pieces))
        row+=1
def combinePieces(piece1,piece2):   
    combinedpiece = {}
    for i in piece1:
        combinedpiece[i]=piece1[i]^piece2[i]
    return tuple([combinedpiece])
def total(piece):
    total=0
    for i in piece:
        total+=piece[i]
    return total
def generatePieces(numberofPieces,leftovers=(), filled=False):
    pieces = []
    piece = {}
    if filled:
        for i in range(1,dimension**2+1):
            piece[i]=1
        pieces.append(piece)
        return tuple(pieces)
    else:
        for x in range(numberofPieces):
            piece = {}
            if x<dimension-1:
                for i in range(1,dimension**2+1):
                    if randint(0,dimension-x)==0 and leftovers[0][i]==1:
                        piece[i]=1
                    else:
                        piece[i]=0
                leftovers = combinePieces(leftovers[0],piece)
            elif x==dimension-1:
                piece = leftovers[0]
            else:
                for i in range(1,dimension**2+1):
                    if randint(0,2)==1:
                        piece[i]=1
                    else:
                        piece[i]=0
            pieces.append(piece)
        return tuple(pieces)


def polyominoes():
    box = generatePieces(1, filled = True)
    keepgenerating = True
    print("Generating Puzzle...")
    #pieces=generatePieces(2*dimension,leftovers = box)
    while keepgenerating:
        pieces=generatePieces(2*dimension,leftovers = box)
        for eachpiece in pieces:
            if dimension-1<total(eachpiece)<(dimension**2)/2:
                keepgenerating=False
            else:
                keepgenerating=True
                break
    l = list(pieces)
    shuffle(l)
    pieces = tuple(l)
    current = combinePieces(box[0],box[0])
    moves =0
    while not current[0]==box[0]:
        os.system("cls")
        print("Current")
        drawpieces(current)
        print((len(pieces)*((dimension+1)*2+4)-3)*"_" + "\dimension")
        drawpieces(pieces)
        selection = 0
        attempt=current
        while selection==0: #or not total(attempt[0])==total(pieces[selection-1])+total(current[0]):
            selection = input("Choose a box: ")
            try:
                selection = int(selection)
            except ValueError: 
                selection =0
            try:
                attempt = combinePieces(pieces[selection-1],current[0])
            except IndexError:
                selection = 0
        current = attempt
        moves+=1
    os.system("cls")
    drawpieces(current)
    drawpieces(pieces)
    print("You solved it in", moves, "moves")
    if moves<2*dimension:
        return True
    else:
        return False
#####################################################################################################
